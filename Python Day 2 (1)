{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ef5251c-402a-44e8-af5d-5de2969fbcf0",
   "metadata": {},
   "outputs": [],
   "source": [
    "Introduction to python "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6575a875-b28d-4bcd-af0b-5cf506553f65",
   "metadata": {},
   "outputs": [],
   "source": [
    "Understanding the vaariables in python programming"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c1e0679a-43fe-4b6b-bd97-ec75e1251429",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b266c44a-e19e-452e-8452-65aa86fc772f",
   "metadata": {},
   "outputs": [],
   "source": [
    "b=3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9ed976a0-fa3e-48f0-99c2-0fc1b7bb8e84",
   "metadata": {},
   "outputs": [],
   "source": [
    "c=a+b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "74d1c22f-e2e3-4214-9d0e-6049f21e0a6e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6cc108ac-0c16-4a28-a784-b80fa1c9b97c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "857f7a02-292c-4b13-9fff-adf5613ea59f",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rules for declaring variables  in pyhton :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ab98a91-64eb-4c2d-af8d-2519cc4e9032",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rule no 1 : no spaces while declaring the variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "af29fc8e-0b8d-4abe-9b46-e9faed44892b",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (951545634.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[9], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    first name = 'Faiyaz'\u001b[0m\n\u001b[1;37m          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "first name = 'Faiyaz'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ffcb9850-caf9-4eca-8031-a694d511c852",
   "metadata": {},
   "outputs": [],
   "source": [
    "firstname = 'Faiyaz'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04b5c0c5-21d7-4813-b805-10bf3a79cc31",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rule no 2 : A variable should not start with a number **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "091bd4a5-1566-422d-854f-e26644312a44",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rule no 3 : A variable name should not contain any speacial characters \n",
    "@ $ % ^"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a87d5fa5-4a03-4ea4-924c-eec84ae217ff",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2866799071.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[12], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    name@ = 'joseph'\u001b[0m\n\u001b[1;37m          ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "name@ = 'joseph'\n",
    "print(name@)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33f5cc96-5fa8-4cea-8f3e-a5cbd33e6b8e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba65e092-38c6-4f63-bccb-451a8ee25956",
   "metadata": {},
   "outputs": [],
   "source": [
    "introduction to datatypes :\n",
    "1. String ====> str\n",
    "2. numbers (integer===>int and floats (decimals ====>0.1,0.2))===>floats\n",
    "3. lists =====> tuple \n",
    "5. Dictionaries ====> dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5bdf75e6-f4fe-4cc4-9719-d82a06cc01af",
   "metadata": {},
   "outputs": [],
   "source": [
    "classification of data types\n",
    "Broadly datatypes are classified in two catagories :\n",
    " 1. Mutable datatypes ===> which we can edit/alter ====> flexible in nature \n",
    " 2. immutable datatypes ====> which we can be able to edit / alter ====> fixed in natuer "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78852aa3-9ac8-47de-b8f8-3ad45844bf38",
   "metadata": {},
   "outputs": [],
   "source": [
    "introduction to srtring data type :\n",
    "\n",
    "Defination : A string is nothing but a series of characters declared in quotes.\n",
    "\n",
    "classification : It is classified as an immutable datatype \n",
    "\n",
    "How to define the string  datatype :\n",
    " 1. single quotes \n",
    " 2. double quotes\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "efa61a51-8a0d-43b3-9fbe-b81335b8d40d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "naga babu\n"
     ]
    }
   ],
   "source": [
    "name = 'naga babu' # single quote\n",
    "print(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "46598729-c6d8-4ce6-af4c-cea884b464c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "basha r\n"
     ]
    }
   ],
   "source": [
    "name2 = \"basha r\" # double quote\n",
    "print(name2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a9bea4e-da6b-4865-b14a-b74d7f6729f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "introduction to string methods :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "5c4ad900-bb1f-4314-9e12-5f8dc65f3399",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "34afc107-b4fd-41be-85b2-17d6461916c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "joseph anthony\n"
     ]
    }
   ],
   "source": [
    "fullname = \"joseph anthony\"\n",
    "print(fullname)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "33c99333-3cbb-41cb-bc7f-aea87dfb0586",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Joseph Anthony\n"
     ]
    }
   ],
   "source": [
    "print(fullname.title())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc4fc9ac-6bdf-45cd-8d2e-f9cc0cd975ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "# req : i want the entire name in capitals .."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "05cb5d0b-f7e0-476b-8c2d-d26e969391be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "JOSEPH ANTHONY\n"
     ]
    }
   ],
   "source": [
    "print(fullname.upper())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2612909d-7c4b-46c1-b6cd-4858ed5eedf5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# req : i want the entire name in small case letters "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b1cf9ee0-bc46-4705-8cf2-675045d980cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "joseph anthony\n"
     ]
    }
   ],
   "source": [
    "print(fullname.lower())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "266480db-f6c8-4ecc-be0b-43c7888bab3a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
